Для создания полигона с помощью библиотеки folium и shapely можно использовать следующий код:

```python
import folium
from shapely.geometry import Polygon

# координаты вершин полигона
coords = [(55.7522200, 37.6155600), (55.7558315, 37.6172999), 
          (55.7561000, 37.6200000), (55.7544400, 37.6180600)]

# создание объекта Polygon
poly = Polygon(coords)

# создание объекта карты
m = folium.Map(location=[55.7539300, 37.620795], zoom_start=15)

# создание объекта GeoJson для отображения полигона на карте
folium.GeoJson(poly.__geo_interface__).add_to(m)

# отображение карты
m
```

В данном примере создается полигон с координатами вершин `(55.7522200, 37.6155600)`, `(55.7558315, 37.6172999)`, `(55.7561000, 37.6200000)` и `(55.7544400, 37.6180600)`. Затем создается объект карты с центром в координатах `(55.7539300, 37.620795)` и масштабом `zoom_start=15`. Далее создается объект GeoJson для отображения полигона на карте и добавляется на карту с помощью метода `add_to()`. Наконец, карта отображается с помощью метода `m`.

`__geo_interface__` - это атрибут объектов геометрии библиотеки Shapely, который возвращает словарь Python, соответствующий формату GeoJSON. Этот словарь может быть использован для создания объектов GeoJSON в библиотеках, которые могут работать с этим форматом данных, например, в библиотеке folium для отображения геометрических объектов на карте.

Для получения координат полигона в формате GeoJSON можно воспользоваться атрибутом `__geo_interface__`, который возвращает словарь, содержащий информацию о геометрии объекта в формате GeoJSON. 

Например, для полигона `poly` можно получить его координаты следующим образом:

```python
coords = poly.__geo_interface__['coordinates']
```

В данном случае переменная `coords` будет содержать список координат вершин полигона в формате GeoJSON. Если полигон содержит отверстия, то список координат будет иметь вложенную структуру. 

Пример:

```python
from shapely.geometry import Polygon

# Создаем полигон с двумя отверстиями
poly = Polygon([[(0, 0), (0, 1), (1, 1), (1, 0)],
                [(0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2)],
                [(0.4, 0.4), (0.6, 0.4), (0.6, 0.6), (0.4, 0.6)]])

# Получаем координаты полигона
coords = poly.__geo_interface__['coordinates']

print(coords)
# Output: 
# [[(0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0)], 
#  [[(0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2)], 
#   [(0.4, 0.4), (0.6, 0.4), (0.6, 0.6), (0.4, 0.6)]]]
```

Для ограничения карты в Python folium можно использовать метод `fit_bounds`, который позволяет установить границы видимой области карты.

Пример:

```python
import folium

# Создаем карту
m = folium.Map(location=[55.7522, 37.6156], zoom_start=10)

# Определяем границы видимой области карты
bounds = [[55.6, 37.4], [55.9, 37.8]]

# Устанавливаем границы видимой области на карте
m.fit_bounds(bounds)

# Отображаем карту
m
```

В данном примере мы создаем карту с центром в Москве и зумом 10. Затем мы определяем границы видимой области карты и устанавливаем их с помощью метода `fit_bounds`. Наконец, отображаем карту.

Обратите внимание, что границы задаются в формате `[[широта_мин, долгота_мин], [широта_макс, долгота_макс]]`.
