Для создания полигона с помощью библиотеки folium и shapely можно использовать следующий код:

python
import folium
from shapely.geometry import Polygon

# координаты вершин полигона
coords = [(55.7522200, 37.6155600), (55.7558315, 37.6172999), 
          (55.7561000, 37.6200000), (55.7544400, 37.6180600)]

# создание объекта Polygon
poly = Polygon(coords)

# создание объекта карты
m = folium.Map(location=[55.7539300, 37.620795], zoom_start=15)

# создание объекта GeoJson для отображения полигона на карте
folium.GeoJson(poly.__geo_interface__).add_to(m)

# отображение карты
m


В данном примере создается полигон с координатами вершин `(55.7522200, 37.6155600)`, `(55.7558315, 37.6172999)`, `(55.7561000, 37.6200000)` и `(55.7544400, 37.6180600)`. Затем создается объект карты с центром в координатах `(55.7539300, 37.620795)` и масштабом `zoom_start=15`. Далее создается объект GeoJson для отображения полигона на карте и добавляется на карту с помощью метода `add_to()`. Наконец, карта отображается с помощью метода `m`.

`__geo_interface__` - это атрибут объектов геометрии библиотеки Shapely, который возвращает словарь Python, соответствующий формату GeoJSON. Этот словарь может быть использован для создания объектов GeoJSON в библиотеках, которые могут работать с этим форматом данных, например, в библиотеке folium для отображения геометрических объектов на карте.

Для получения координат полигона в формате GeoJSON можно воспользоваться атрибутом `__geo_interface__`, который возвращает словарь, содержащий информацию о геометрии объекта в формате GeoJSON. 

Например, для полигона `poly` можно получить его координаты следующим образом:

python
coords = poly.__geo_interface__['coordinates']


В данном случае переменная `coords` будет содержать список координат вершин полигона в формате GeoJSON. Если полигон содержит отверстия, то список координат будет иметь вложенную структуру. 

Пример:

python
from shapely.geometry import Polygon

# Создаем полигон с двумя отверстиями
poly = Polygon([[(0, 0), (0, 1), (1, 1), (1, 0)],
                [(0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2)],
                [(0.4, 0.4), (0.6, 0.4), (0.6, 0.6), (0.4, 0.6)]])

# Получаем координаты полигона
coords = poly.__geo_interface__['coordinates']

print(coords)
# Output: 
# [[(0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0)], 
#  [[(0.2, 0.2), (0.2, 0.8), (0.8, 0.8), (0.8, 0.2)], 
#   [(0.4, 0.4), (0.6, 0.4), (0.6, 0.6), (0.4, 0.6)]]]


Для создания полигона из точек в Python с использованием библиотеки geopandas необходимо сначала создать объект DataFrame, содержащий столбцы с координатами x и y точек. Затем можно использовать метод GeoDataFrame() для создания геодатафрейма, а затем метод geometry.convex_hull для создания полигона из точек.

Например, предположим, что у нас есть объект DataFrame с координатами x и y точек:

python
import geopandas as gpd
import pandas as pd

# Создаем DataFrame с координатами x и y точек
df = pd.DataFrame({
    'x': [0, 1, 2, 3, 4],
    'y': [0, 2, 4, 2, 0]
})


Затем мы можем использовать метод GeoDataFrame() для создания геодатафрейма:

python
# Создаем геодатафрейм из DataFrame
gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.x, df.y))


Здесь мы используем метод points_from_xy() для создания геосерии точек из столбцов x и y нашего DataFrame.

Наконец, мы можем использовать метод convex_hull() объекта geometry геодатафрейма для создания полигона из точек:

python
# Создаем полигон из точек
polygon = gdf.geometry.convex_hull


В данном примере мы используем метод convex_hull() для создания выпуклой оболочки из геосерии точек в столбце geometry нашего геодатафрейма. Полученный объект polygon будет представлять собой полигон, охватывающий все наши точки.


Для ограничения карты в Python folium можно использовать метод `fit_bounds`, который позволяет установить границы видимой области карты.

Пример:

python
import folium

# Создаем карту
m = folium.Map(location=[55.7522, 37.6156], zoom_start=10)

# Определяем границы видимой области карты
bounds = [[55.6, 37.4], [55.9, 37.8]]

# Устанавливаем границы видимой области на карте
m.fit_bounds(bounds)

# Отображаем карту
m


В данном примере мы создаем карту с центром в Москве и зумом 10. Затем мы определяем границы видимой области карты и устанавливаем их с помощью метода `fit_bounds`. Наконец, отображаем карту.

Обратите внимание, что границы задаются в формате `[[широта_мин, долгота_мин], [широта_макс, долгота_макс]]`.

Для ограничения максимального и минимального значения масштаба (zoom) на карте в библиотеке folium можно использовать аргументы `min_zoom` и `max_zoom` при создании объекта `Map`. 

Пример:

python
import folium

# Создаем карту с центром в Москве и максимальным масштабом 12
m = folium.Map(location=[55.7558, 37.6173], zoom_start=12, max_zoom=15, min_zoom=8)

# Добавляем маркер на карту
folium.Marker(location=[55.7558, 37.6173], tooltip='Москва').add_to(m)

# Отображаем карту
m


В данном примере максимальный масштаб карты ограничен значением 15, а минимальный - 8. При попытке увеличить масштаб выше 15 или уменьшить ниже 8 будет достигнут предел и дальнейшие изменения масштаба будут заблокированы.

Для определения того, к каким полигонам принадлежат определенные точки в Python можно использовать библиотеку shapely. Для этого нужно создать объекты Polygon с помощью координат вершин полигонов и объект Point с помощью координат точек. Затем можно использовать метод contains() объекта Polygon для проверки, содержится ли точка в полигоне.

Например, предположим, что у нас есть список полигонов в формате списка списков координат и список точек в формате списка кортежей координат:

python
from shapely.geometry import Polygon, Point

# Список полигонов
polygons = [
    [(0, 0), (0, 10), (10, 10), (10, 0)],
    [(20, 20), (20, 30), (30, 30), (30, 20)]
]

# Список точек
points = [(5, 5), (25, 25), (15, 15)]


Затем мы можем создать объекты Polygon для каждого полигона и объекты Point для каждой точки и проверить, к каким полигонам принадлежат точки:

python
# Создаем объекты Polygon для каждого полигона
polygons = [Polygon(polygon) for polygon in polygons]

# Создаем объекты Point для каждой точки и проверяем их на принадлежность к полигонам
for point in points:
    for polygon in polygons:
        if polygon.contains(Point(point)):
            print(f"Точка {point} принадлежит полигону {polygon}")


В данном примере мы создаем объекты Polygon для каждого полигона с помощью списков координат и объекты Point для каждой точки с помощью кортежей координат. Затем мы проверяем каждую точку на принадлежность к каждому полигону с помощью метода contains() объекта Polygon. Если точка содержится в полигоне, мы выводим сообщение о том, что точка принадлежит полигону.

python
# Получить DataFrame из polygon
pd.DataFrame(shapely_polygon.exterior.coords) 
