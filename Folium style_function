Все стили, которые можно установить для объектов GeoJSON на карте, могут быть найдены в документации библиотеки Leaflet, на которой основана библиотека Folium.

Здесь приведен список основных стилей, которые можно установить для объектов GeoJSON на карте с помощью метода `style_function` в `folium.GeoJson()`:

- `color`: цвет границы объекта GeoJSON
- `fillColor`: цвет заливки объекта GeoJSON
- `weight`: толщина границы объекта GeoJSON
- `opacity`: прозрачность объекта GeoJSON
- `fillOpacity`: прозрачность заливки объекта GeoJSON
- `radius`: радиус маркера объекта GeoJSON

Вот пример кода, который выводит все стили объекта GeoJSON:

```python
import folium

# Создание объекта GeoJSON
geojson = {
    "type": "Feature",
    "geometry": {
        "type": "Point",
        "coordinates": [-122.4194, 37.7749]
    },
    "properties": {
        "name": "San Francisco"
    }
}

# Создание объекта Folium карты
m = folium.Map(location=[37.7749, -122.4194], zoom_start=12)

# Функция, которая выводит все стили объекта GeoJSON
def my_style_function(feature):
    print(feature.keys())
    return {}

# Добавление объекта GeoJSON на карту
folium.GeoJson(geojson, style_function=my_style_function).add_to(m)

# Сохранение карты в HTML
m.save('map.html')
```

В этом примере, мы создаем объект GeoJSON, который представляет собой точку на карте. Затем мы создаем объект Folium карты и добавляем эту точку на карту с помощью `folium.GeoJson()`. Мы также определяем функцию `my_style_function()`, которая выводит все ключи объекта GeoJSON, и передаем ее в качестве параметра `style_function` в `folium.GeoJson()`. 

При запуске этого кода вы увидите список всех ключей объекта GeoJSON, который включает в себя все стили, которые могут быть установлены для объектов GeoJSON на карте.
Параметр style_function в методе folium.GeoJson() позволяет применять пользовательскую функцию к каждому объекту GeoJSON на карте и возвращать словарь стилей, который определяет, как объект должен быть отображен на карте. Функция должна принимать один аргумент - объект feature GeoJSON и возвращать словарь стилей.

Вот несколько примеров того, как можно использовать style_function:

# Пример 1: Установка цвета заливки каждого полигона на карте
def my_style_function(feature):
    return {
        'fillColor': 'blue',
        'fillOpacity': 0.2,
        'color': 'black',
        'weight': 1
    }

# Пример 2: Установка цвета маркера каждой точки на карте
def my_style_function(feature):
    return {
        'fillColor': 'red',
        'color': 'red',
        'weight': 1,
        'radius': 5
    }

# Пример 3: Установка цвета линии каждого многоугольника на карте
def my_style_function(feature):
    return {
        'color': 'green',
        'weight': 1
    }

# Пример 4: Установка цвета линии каждой линии на карте
def my_style_function(feature):
    return {
        'color': 'purple',
        'weight': 2
    }


Как видно из примеров, функция style_function должна возвращать словарь, который задает стили для объекта GeoJSON. Ключи словаря соответствуют стилям, которые можно установить для объектов GeoJSON на карте, а значения соответствуют значениям этих стилей.

В примерах выше мы устанавливаем цвета заливки, цвета границ, толщину границ, прозрачность и радиус маркера для каждого объекта на карте. Вы можете изменять значения этих параметров, чтобы создавать различные стили для объектов на карте.

Например, чтобы использовать функцию my_style_function в folium.GeoJson(), вы можете сделать следующее:

folium.GeoJson(geojson, style_function=my_style_function).add_to(m)

Ex. colormap
Конечно, вот пример использования folium.colormap.LinearColormap:

import folium
from branca.colormap import LinearColormap

# Создаем объект LinearColormap с указанием начального и конечного цветов,
# а также интервала значений, для которых будет создана цветовая схема.
colormap = LinearColormap(colors=['red', 'yellow', 'green'], vmin=0, vmax=1000)

# Создаем объект карты
m = folium.Map(location=[48.8566, 2.3522], zoom_start=12)

# Создаем объект GeoJSON и добавляем его на карту,
# задавая цвет заполнения для каждого объекта на основе значения свойства 'value'
folium.GeoJson(
    data=geojson_data,
    style_function=lambda feature: {
        'fillColor': colormap(feature['properties']['value']),
        'color': 'black',
        'weight': 2,
        'dashArray': '5, 5'
    }
).add_to(m)

# Добавляем легенду на карту
colormap.add_to(m)

# Отображаем карту
m


В этом примере мы создаем объект LinearColormap с указанием начального и конечного цветов ('red' и 'green' соответственно) и интервала значений (vmin=0 и vmax=1000), для которых будет создана цветовая схема. Затем мы создаем объект карты m и добавляем на него объект GeoJSON, задавая цвет заполнения для каждого объекта на основе значения свойства 'value'. Для этого мы используем лямбда-функцию style_function, которая извлекает значение свойства 'value' из объекта feature и передает его в метод colormap, чтобы получить соответствующий цвет. Мы также задаем цвет обводки, толщину и стиль линий для каждого объекта. Затем мы добавляем легенду на карту, используя метод add_to объекта colormap, и отображаем карту с помощью метода m.
Здесь geojson - это GeoJSON объект, который вы хотите добавить на карту, а m - это объект Folium карты.
