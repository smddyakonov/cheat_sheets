fuzzywuzzy
это библиотека Python, предназначенная для нечёткого сравнения строк
conda install -c conda-forge fuzzywuzzy

difflib 
Модуль difflib содержит классы и функции для сравнения последовательностей. Модуль может быть использован, для сравнения текста и включает в себя классы и функции, 
которые создают отчеты в нескольких распространенных форматах, включая HTML
conda install -c conda-forge diff-match-patch

natasha
набор Python-библиотек для обработки текстов на естественном русском языке
conda install -c conda-forge natasha

import pandas as pd
from fuzzywuzzy import fuzz
from difflib import SequenceMatcher
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def fuzzy_search(column1, column2):
    results = {
        "Исходный текст": [],
        "Совпадение (Косинус)": [],
        "Значение (Косинус)": [],
        "Совпадение (Левенштейн)": [],
        "Значение (Левенштейн)": [],
        "Совпадение (FuzzyWuzzy)": [],
        "Значение (FuzzyWuzzy)": [],
        "Совпадение (Difflib)": [],
        "Значение (Difflib)": []
    }
    
    # Векторизуем первый столбец
    vectorizer = TfidfVectorizer().fit_transform(column1)
    vectors = vectorizer.toarray()
    
    for search_str in column2:
        # Косинусное сходство
        search_vector = vectorizer.transform([search_str]).toarray()
        cosine_similarities = cosine_similarity(search_vector, vectors).flatten()
        
        # Находим максимальное значение косинусного сходства
        max_cosine_index = np.argmax(cosine_similarities)
        max_cosine_value = cosine_similarities[max_cosine_index]
        cosine_match = column1[max_cosine_index] if max_cosine_value > 0 else None
        
        # Расстояние Левенштейна
        levenshtein_match = min(column1, key=lambda x: Levenshtein.distance(search_str, x))
        levenshtein_distance = Levenshtein.distance(search_str, levenshtein_match)
        
        # FuzzyWuzzy
        fuzzy_matches = [(text, fuzz.ratio(search_str, text)) for text in column1]
        fuzzy_match, fuzzy_score = max(fuzzy_matches, key=lambda x: x[1]) if fuzzy_matches else (None, 0)
        
        # Difflib
        difflib_matches = [(text, SequenceMatcher(None, search_str, text).ratio()) for text in column1]
        difflib_match, difflib_score = max(difflib_matches, key=lambda x: x[1]) if difflib_matches else (None, 0)
        
        # Добавляем результаты в словарь
        results["Исходный текст"].append(search_str)
        results["Совпадение (Косинус)"].append(cosine_match)
        results["Значение (Косинус)"].append(max_cosine_value)
        results["Совпадение (Левенштейн)"].append(levenshtein_match)
        results["Значение (Левенштейн)"].append(levenshtein_distance)
        results["Совпадение (FuzzyWuzzy)"].append(fuzzy_match)
        results["Значение (FuzzyWuzzy)"].append(fuzzy_score)
        results["Совпадение (Difflib)"].append(difflib_match)
        results["Значение (Difflib)"].append(difflib_score)

    # Создаем DataFrame из результатов
    df_results = pd.DataFrame(results)
    return df_results

# Пример использования
column1 = ["apple", "banana", "orange", "grapefruit"]
column2 = ["appl", "banan", "grapefuit"]

results_df = fuzzy_search(column1, column2)
print(results_df)
