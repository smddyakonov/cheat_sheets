# Пустые
df.isna().sum() # - посмотреть наполняемость
df.isna().sum()[df.isna().sum()>N] # - посмотреть N-столбцов по наполняемости

# histplot с hue
# Ex.: https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 225 строка
# функция для построения histplot с hue [hue - Семантическая переменная, которая сопоставляется для определения цвета элементов графика]
def graf(df, col):
    return sns.histplot(data=df, x=df[col], hue=col_hue, multiple="dodge", shrink=0.8) 

# Корреляции
# Ex.: https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 231 строка
df.corr() # - матрица корреляций [прямолинейная связь, y = kx +b]
plt.subplots(figsize=(16,9))
sns.heatmap(df.corr(), cmap=sns.color_palette("coolwarm", 10000), vmin=-1, center=0)
plt.show()

df.phik_matrix() # - матрица phik корреляций [линейная связь, y = kx +b, x^2, ln(x) и т.п.]
plt.subplots(figsize=(16,9))
sns.heatmap(df.phik_matrix(), cmap=sns.color_palette("coolwarm", 10000), vmin=-1, center=0)
plt.show()

# nlargest Возвращает первые n строк, упорядоченных по столбцам в порядке убывания df.nlargest(n, columns, keep='first')
list_variable_feautre = df.nlargest(n=k, columns=df[col]).index.tolist() # [list_variable_feautre - список переменных признаков]
# Ex.: k nlargest коррелюрующих признаков 
# https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 238 строка "выберем k nlargest признаков по стоблцу df_temp[corr_matrix]"

# nsmallest Возвращает первые n строк, упорядоченных по столбцам в порядке возрастания df.nsmallest(n, columns, keep='first')
list_variable_feautre = df.nsmallest(n=k, columns=df[col]).index.tolist() # [list_variable_feautre - список переменных признаков]
# Ex.: k nsmallest коррелюрующих признаков 
# https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 242 строка "выберем ksmal nsmallest признаков по стоблцу df_temp[corr_matrix]"

# Резделение train test split: sklearn.model_selection.train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)
# Ex.: https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 249 строка

# Моделирование kNN
# class sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, *, weights='uniform', algorithm='auto', leaf_size=30, p=2, metric='minkowski', metric_params=None, n_jobs=None)
# https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train_scaled, y_train)
# Ex.:  https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 255 строка

# ROC-кривая
# Ex.: https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 258 строка
from sklearn import metrics
fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=2)
metrics.auc(fpr, tpr)

# Настройка параметра kNN числа соседей на кросс-валидации
# Ex.: https://github.com/smddyakonov/otus_ds_dyakonov/blob/main/hw-4/hw_4_smndyakonov.ipynb, 260 строка
