Example
import yfinance as yf
data = yf.download('SBER.ME', start='2020-01-01', end='2023-01-01', interval='1d')

Функция yf.download() из библиотеки yfinance загружает исторические данные по тикерам с Yahoo Finance. 
Аргументы этой функции позволяют настроить диапазон дат, тип данных, интервал, корректировки, многопоточность и другие параметры. Вот что означают каждый из аргументов:

Аргументы:
tickers (str или list):
Список тикеров, которые нужно загрузить. Может быть строкой (один тикер) или списком (несколько тикеров).

start (str, по умолчанию None):
Дата начала загрузки данных в формате YYYY-MM-DD. Если не указана, загружаются данные за последние 99 лет.

end (str, по умолчанию None):
Дата окончания загрузки данных в формате YYYY-MM-DD. Если не указана, используется текущая дата.

actions (bool, по умолчанию False):
Если установлено в True, загружаются также данные о дивидендах и сплитах акций.

threads (bool или int, по умолчанию True):
Включает многопоточную загрузку данных. Если указан int, то задает количество потоков.

ignore_tz (bool, по умолчанию None):
Указывает, игнорировать ли часовой пояс при комбинировании данных из разных источников. 
По умолчанию зависит от интервала: для дневных данных (day+) — True, для внутридневных (intraday) — False.

group_by (str, по умолчанию 'column'):
Указывает, как группировать данные. Если group_by='ticker', то данные по каждому тикеру будут сгруппированы отдельно. 
Если 'column', данные будут сгруппированы по столбцам.

auto_adjust (bool, по умолчанию False):
Если установлено в True, автоматически корректирует цены акций с учетом дивидендов и сплитов.

back_adjust (bool, по умолчанию False):
Если установлено в True, возвращает цены, скорректированные на сплиты и дивиденды, для исторических данных.

repair (bool, по умолчанию False):
Пытается исправить ошибки в данных, такие как неверные валютные единицы (например, когда данные в 100 раз больше или меньше).

keepna (bool, по умолчанию False):
Если True, сохраняет строки с пропущенными значениями (NaN), которые вернул Yahoo.

progress (bool, по умолчанию True):
Показывает индикатор прогресса загрузки.

period (str, по умолчанию 'max'):
Задает временной период для загрузки данных. Альтернатива аргументам start и end. Возможные значения:

1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max.
interval (str, по умолчанию '1d'):
Интервал данных. Возможные значения:

1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo.
prepost (bool, по умолчанию False):
Если True, включает данные по премаркету и постмаркету (если доступны).

proxy (str, по умолчанию None):
URL прокси-сервера для загрузки данных через него.

rounding (bool, по умолчанию False):
Если True, округляет значения до двух знаков после запятой.

timeout (float, по умолчанию 10):
Время ожидания в секундах для получения ответа. Можно указать дробные значения, например, 0.01 для более короткого ожидания.

session (requests.Session, по умолчанию None):
Если указано, используется эта сессия для всех запросов.

Example
import yfinance as yf
# Загрузка данных для тикера SBER.ME с 2020-01-01 по 2023-01-01 с дневным интервалом
data = yf.download(
    tickers='SBER.ME', 
    start='2020-01-01', 
    end='2023-01-01', 
    interval='1d', 
    actions=True, 
    auto_adjust=True
)
# Этот код загружает дневные котировки акции "Сбербанка" с 1 января 2020 года по 1 января 2023 года, с учетом дивидендов и сплитов.

В библиотеке yfinance есть несколько ключевых функций и методов для работы с финансовыми данными. 
Помимо yf.download(), которая используется для массовой загрузки данных по тикерам, вот некоторые другие важные функции и методы, доступные в yfinance:

Основные функции и методы в yfinance:
yf.Ticker()
Создает объект тикера для получения подробной информации и данных о конкретной акции или активе.

Example
ticker = yf.Ticker('SBER.ME')

Методы объекта Ticker
После создания объекта тикера с помощью yf.Ticker(), можно использовать несколько методов для получения разнообразной информации.

history(period='1mo', interval='1d')
Возвращает исторические данные по тикеру. Работает аналогично download(), но для одного тикера.

Пример:

python
Копировать код
data = ticker.history(period='1y', interval='1d')
info
Возвращает словарь с подробной информацией о компании или активе, включая рыночную капитализацию, описание, объем торгов и многое другое.

Пример:

python
Копировать код
info = ticker.info
dividends
Возвращает данные о выплатах дивидендов по тикеру.

Пример:

python
Копировать код
dividends = ticker.dividends
splits
Возвращает данные о сплитах акций.

Пример:

python
Копировать код
splits = ticker.splits
actions
Возвращает данные как по дивидендам, так и по сплитам одновременно.

Пример:

python
Копировать код
actions = ticker.actions
financials
Возвращает отчет о финансовых результатах компании (бухгалтерский баланс, прибыль и убытки и т.д.).

Пример:

python
Копировать код
financials = ticker.financials
balance_sheet
Возвращает данные о балансе компании.

Пример:

python
Копировать код
balance_sheet = ticker.balance_sheet
cashflow
Возвращает данные о движении денежных средств.

Пример:

python
Копировать код
cashflow = ticker.cashflow
earnings
Возвращает данные о доходах компании.

Пример:

python
Копировать код
earnings = ticker.earnings
sustainability
Возвращает данные о показателях устойчивого развития компании (ESG — Environmental, Social, Governance).

Пример:

python
Копировать код
sustainability = ticker.sustainability
recommendations
Возвращает рекомендации аналитиков по акции.

Пример:

python
Копировать код
recommendations = ticker.recommendations
calendar
Возвращает данные о ближайших событиях компании, таких как объявления отчетов.

Пример:

python
Копировать код
calendar = ticker.calendar
major_holders
Возвращает данные о крупнейших держателях акций.

Пример:

python
Копировать код
major_holders = ticker.major_holders
institutional_holders
Возвращает данные об институциональных держателях акций.

Пример:

python
Копировать код
institutional_holders = ticker.institutional_holders
mutualfund_holders
Возвращает данные о держателях акций, которые являются паевыми фондами.

Пример:

python
Копировать код
mutualfund_holders = ticker.mutualfund_holders
option_chain
Возвращает данные по опционам для тикера.

Пример:

python
Копировать код
options = ticker.option_chain('2024-12-31')
news
Возвращает последние новости, связанные с тикером.

Пример:

python
Копировать код
news = ticker.news
Пример комплексного использования yfinance:
python
Копировать код
import yfinance as yf

# Создание объекта тикера для Сбербанка
ticker = yf.Ticker('SBER.ME')

# Получение исторических данных за последний год
history_data = ticker.history(period='1y', interval='1d')

# Получение информации о компании
info = ticker.info

# Получение данных о дивидендах
dividends = ticker.dividends

# Получение данных о финансовом состоянии компании
financials = ticker.financials

# Получение последних новостей
news = ticker.news

print(history_data)
print(info)
print(dividends)
print(financials)
print(news)
Таким образом, yfinance предлагает множество инструментов для работы с финансовыми данными, 
начиная с простого скачивания котировок и заканчивая получением финансовых отчетов и анализа новостей.

Помимо yf.Ticker() и yf.download(), библиотека yfinance предлагает несколько дополнительных функций и методов, 
которые могут быть полезны при работе с финансовыми данными. Вот другие ключевые функции и методы:

Дополнительные функции и методы yfinance:
yf.pdr_override()

Эта функция используется для переопределения методов библиотеки pandas_datareader, 
чтобы можно было использовать yfinance для загрузки данных через стандартные функции pandas_datareader.
После вызова этой функции вы сможете загружать данные с Yahoo Finance с использованием стандартного вызова pandas_datareader.data.get_data_yahoo().
Пример:

python
Копировать код
import yfinance as yf
from pandas_datareader import data as pdr

yf.pdr_override()  # Переопределение методов

# Теперь можно использовать pdr для загрузки данных
data = pdr.get_data_yahoo('AAPL', start='2020-01-01', end='2021-01-01')
yf.get_quote_table()

Эта функция возвращает текущие данные о котировках в виде таблицы (словарь с ключами, отражающими различные метрики).
Пример:

python
Копировать код
quote_table = yf.get_quote_table('AAPL')
print(quote_table)
yf.get_market_status()

Возвращает текущее состояние рынка (открыт/закрыт).
Пример:

python
Копировать код
market_status = yf.get_market_status()
print(market_status)
yf.get_stock_financials()

Возвращает основные финансовые данные по акции (выручка, прибыль, операционные расходы и другие показатели).
Пример:

python
Копировать код
financials = yf.get_stock_financials('AAPL')
print(financials)
yf.get_earnings_history()

Возвращает историю отчетов о доходах компании за прошлые периоды.
Пример:

python
Копировать код
earnings_history = yf.get_earnings_history('AAPL')
print(earnings_history)
yf.get_splits()

Получает историю сплитов акций для указанного тикера.
Пример:

python
Копировать код
splits = yf.get_splits('AAPL')
print(splits)
yf.get_dividends()

Возвращает историю дивидендов компании по указанному тикеру.
Пример:

python
Копировать код
dividends = yf.get_dividends('AAPL')
print(dividends)
Пример комплексного использования:
python
Копировать код
import yfinance as yf

# Загрузка данных с использованием yf.download
data = yf.download('AAPL', start='2020-01-01', end='2021-01-01')

# Получение котировок с использованием get_quote_table
quote = yf.get_quote_table('AAPL')

# Получение текущего статуса рынка
market_status = yf.get_market_status()

# Финансовые данные по акции
financials = yf.get_stock_financials('AAPL')

# История доходов
earnings = yf.get_earnings_history('AAPL')

print(data)
print(quote)
print(market_status)
print(financials)
print(earnings)
Эти функции дополняют основной функционал библиотеки yfinance, позволяя получать более точные и актуальные данные о состоянии рынка, 
финансовых показателях компаний и истории выплат дивидендов и сплитов.
